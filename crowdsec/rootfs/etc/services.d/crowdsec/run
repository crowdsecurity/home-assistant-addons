#!/usr/bin/with-contenv bashio

bashio::log.info "Running Crowdsec addon"

# Declare variables
declare acquisition
declare disable_lapi
declare remote_lapi_url
declare agent_username
declare agent_password
declare collections
declare parsers
declare scenarios
declare postoverflows
declare parsers_to_disable
declare scenarios_to_disable
declare disable_online_api

# Get all arguments
acquisition=$(bashio::config 'acquisition')
disable_lapi=$(bashio::config 'disable_lapi')
remote_lapi_url=$(bashio::config 'remote_lapi_url')
agent_username=$(bashio::config 'agent_username')
agent_password=$(bashio::config 'agent_password')
collections=$(bashio::config 'collections')
parsers=$(bashio::config 'parsers')
scenarios=$(bashio::config 'scenarios')
postoverflows=$(bashio::config 'postoverflows')
parsers_to_disable=$(bashio::config 'parsers_to_disable')
scenarios_to_disable=$(bashio::config 'scenarios_to_disable')
disable_online_api=$(bashio::config 'disable_online_api')

# Copy Crowdsec config and data files to make it persistent if it's not already
if [ -d "/config/.storage/crowdsec/config/" ]; then
    bashio::log.info "Crowdsec config directory already persistent..."
else
    mkdir -p /config/.storage/crowdsec/config/
    cp -r /etc/crowdsec/* /config/.storage/crowdsec/config/
    for elem in $(find /config/.storage/crowdsec/config/ -type l); do
        oldlink=$(readlink $elem)
        if [[ "$oldlink" == *"/config/.storage/"* ]]; then
            continue
        else
            newlink="${oldlink//\/etc\/crowdsec/\/config\/.storage\/crowdsec\/config}"
            ln -sf ${newlink} $elem
        fi
    done
    sed -i 's#/etc/crowdsec/#/config/.storage/crowdsec/config/#g' /config/.storage/crowdsec/config/config.yaml
fi
if [ -d "/config/.storage/crowdsec/data/" ]; then
    bashio::log.info "Crowdsec data directory already persistent..."
else
    mkdir -p /config/.storage/crowdsec/data/
    cp -r /var/lib/crowdsec/data/* /config/.storage/crowdsec/data/
    sed -i 's#/var/lib/crowdsec/data/#/config/.storage/crowdsec/data/#g' /config/.storage/crowdsec/config/config.yaml
fi
export CONFIG_FILE="/config/.storage/crowdsec/config/config.yaml"

# Set acquis.yaml file
echo "${acquisition}" > /config/.storage/crowdsec/config/acquis.yaml

## Environment variables settings

# Local API settings
if bashio::var.true "${disable_lapi}"; then
    bashio::log.info "Disabling Local API and checking credentials..."
    if [[ -z "${remote_lapi_url}" ]] || [[ -z "${agent_username}" ]] || [[ -z "${agent_password}" ]]; then
        bashio::log.error "When disabling lapi, you need to provide remote 'remote_lapi_url', 'agent_username' and 'agent_password'"
        exit 1
    fi
    export DISABLE_LOCAL_API=true
    export LOCAL_API_URL="${remote_lapi_url}"
    export AGENT_USERNAME="${agent_username}"
    export AGENT_PASSWORD="${agent_password}"
fi

# Disable or not the Online API
if bashio::var.true "${disable_online_api}"; then
    bashio::log.info "Disabling Online API..."
    #yq eval -i '.api.server.online_client = {"credentials_path": ""}' /config/.storage/crowdsec/config/config.yaml
    export DISABLE_ONLINE_API="true"
else
    yq eval -i '.api.server.online_client = {"credentials_path": "/config/.storage/crowdsec/config/online_api_credentials.yaml"}' /config/.storage/crowdsec/config/config.yaml
    bashio::log.info "Checking if online API credentials exists..."
    credentials_exists=$(yq '.url' /config/.storage/crowdsec/config/online_api_credentials.yaml)
    if [[ $credentials_exists == "null" ]]; then
        cscli -c /config/.storage/crowdsec/config/config.yaml capi register > /config/.storage/crowdsec/config/online_api_credentials.yaml
        bashio::log.info "Registration to online API done"
    fi
fi

# Set collections to install env var
COLLECTIONS=""
if [[ ! -z "${collections}" ]]; then
    for item in "${collections}"; do
        COLLECTIONS="${COLLECTIONS}${item} "
    done
    export COLLECTIONS="${COLLECTIONS}"
fi

# Set parsers to install env var
PARSERS=""
if [[ ! -z "${parsers}" ]]; then
    for item in "${parsers}"; do
        PARSERS="${PARSERS}${item} "
    done
    export PARSERS="${PARSERS}"
fi

# Set scenarios to install env var
SCENARIOS=""
if [[ ! -z "${scenarios}" ]]; then
    for item in "${scenarios}"; do
        SCENARIOS="${SCENARIOS}${item} "
    done
    export SCENARIOS="${SCENARIOS}"
fi

# Set scenarios to install env var
POSTOVERFLOWS=""
if [[ ! -z "${postoverflows}" ]]; then
    for item in "${postoverflows}"; do
        POSTOVERFLOWS="${POSTOVERFLOWS}${item} "
    done
    export POSTOVERFLOWS="${POSTOVERFLOWS}"
fi

#Set parsers to disable en var
DISABLE_PARSERS=""
if [[ ! -z "${parsers_to_disable}" ]]; then
    for item in "${parsers_to_disable}"; do
        DISABLE_PARSERS="${DISABLE_PARSERS}${item} "
    done
    export DISABLE_PARSERS="${DISABLE_PARSERS}"
fi

#Set scenarios to disable en var
DISABLE_SCENARIOS=""
if [[ ! -z "${scenarios_to_disable}" ]]; then
    for item in "${scenarios_to_disable}"; do
        DISABLE_SCENARIOS="${DISABLE_SCENARIOS}${item} "
    done
    export DISABLE_SCENARIOS="${DISABLE_SCENARIOS}"
fi

# In Home Assistant, the user does not have control over the volumes (it's managed by the add-on)
# And crowdsec is using not default paths, which breaks the check done in the entrypoint
export CROWDSEC_BYPASS_DB_VOLUME_CHECK=true

exec bash /docker_start.sh
